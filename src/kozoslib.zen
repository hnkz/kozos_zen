const uart = @import("uart.zen");

pub fn dump(buf: [*]u8, size: usize) u32 {
    var i: usize = 0;
    puts("0x");
    putxval(i, 8);
    puts(" ");
    while(i < size) {
        putxval(buf[i], 2);
        if((i & 0xf) == 15) {
            puts("\n");
            putxval(i, 8);
            puts(" ");
        } else {
            if((i & 0xf) == 7){
                puts(" ");
            }
            puts(" ");
        }
        i += 1;
    }
    puts("\r\n");
    return 0;
}

pub fn wait() void {
    var i: u32 = 0;
    while(i < 30000) {
        i += 1;
    }
}

pub fn putxval(value: u32, column: u32) void {
    var buf: [10]u8 = [_]u8{0} ** 10;
    var val = value;
    var col = column;
    var index: usize = buf.len - 1;

    while(val > 0 or col > 0) {
        buf[index] = "0123456789abcdef"[val & 0xf];
        index -= 1;
        val >>= 4;
        if (col > 0) col-=1;
    }
    puts(buf);
}

pub fn putc(c: u8) void {
    if(c == '\n') {
        uart.send_byte('\r');
    }
    uart.send_byte(c);
}

pub fn puts(s: []const u8) void {
    for(s) | c | {
        putc(c);
    }
}

pub fn getc() u8 {
    var data: u8 = while(true) {
        if(uart.recv_byte()) |b| {
            break b;
        }
    } else 0;
    if(data == '\r') {
        putc(data);
        data = '\n';
    }
    putc(data);
    return data;
}

pub fn gets(buf: []u8) usize {
    var i: usize = 0;
    while(i < buf.len) {
        const c = getc();
        if(c == '\n') {
            break;
        }
        buf[i] = c;
        i += 1;
    }
    return i;
}